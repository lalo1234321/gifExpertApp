{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACRC,mBAAS,IADD,mBACrCC,EADqC,KACzBC,EADyB,KAmB5C,OACI,sBAAMC,SAZW,SAACC,GAElBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAO,IACzBR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SArBc,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,a,+BCPlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGGA,EAAKC,OAHR,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAQD,EAAIC,GACZC,MAAQF,EAAIE,MACZV,IAAG,UAAKQ,EAAIG,cAAT,aAAK,EAAYC,iBAAiBZ,QAT1B,kBAcZM,GAdY,4CAAH,sDCEPO,EAAc,SAAC,GAAoB,IAAnBJ,EAAkB,EAAlBA,GAAGC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAElC,OADAc,QAAQC,IAAI,CAACN,KAAIC,QAAOV,QAEpB,sBAAKgB,UAAU,6CAAf,UACI,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,4BAAIA,QCHHS,EAAU,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAAc,ECDX,SAACA,GAAc,IAAD,EACZd,mBAAS,CAC/BqB,KAAO,GACPe,SAAU,IAHwB,mBAC/BC,EAD+B,KACxBC,EADwB,KA0BvC,OApBCC,qBAAW,WACP1B,EAAQC,GACC0B,MAAK,SAAAC,GACFC,YAAW,WACPJ,EAAS,CACLjB,KAAOoB,EACPL,SAAU,MAEhB,UAGhB,CAACtB,IASGuB,EDnB0BM,CAAa7B,GAA/Ba,EANqB,EAM5BN,KAAce,EANc,EAMdA,QAKrB,OAJAN,QAAQC,IAAIJ,GACZG,QAAQC,IAAIK,GAIR,eAAC,WAAD,WACI,oBAAIJ,UAAU,6CAAd,SAA4DlB,IAC3DsB,EAAU,mBAAGJ,UAAU,wCAAb,sBAAoE,KAC/E,qBAAKA,UAAU,YAAf,SAIYL,EAAOJ,KAAI,SAACC,GACR,OACI,cAAC,EAAD,eAEIA,GADCA,EAAIC,aEc1BmB,EAtCM,WAAM,MAGa5C,mBAAS,CAAC,cAHvB,mBAGhB6C,EAHgB,KAGJ9C,EAHI,KASvB,OACI,eAAC,WAAD,WACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAKA,6BAEQ8C,EAAWtB,KAAI,SAACT,GACZ,OACI,cAAC,EAAD,CACIA,SAAUA,GADAA,Y,MCpB1CgC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.4306b8ae.chunk.js","sourcesContent":["\nimport React, { Fragment,useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setCategories}) => {\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        // console.log(e.target.value)\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        //Evita que al hacer enter en un formulario se refresqué la pantalla\n        e.preventDefault();\n        //Para validar que no se inserte algo vacío\n        if( inputValue.trim().length>2 ){\n            setCategories(cats => [inputValue,...cats]);\n            setInputValue('');\n        }\n        \n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n                type=\"text\" \n                value={inputValue}\n                onChange={handleInputChange}\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories : PropTypes.func.isRequired\n}","\n\nexport const getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=YXyCG53XRfqDoBcy16i8lraHyi72KAJC`;\n    const resp = await fetch(url);\n    const {data}  = await resp.json();\n    //? para preguntar si el endpoit devuelve información\n    const gifs = data.map( img => {\n        return {\n            id    : img.id,\n            title : img.title,\n            url   : img.images?.downsized_medium.url\n        }\n    }); \n\n    //console.log(gifs);\n    return gifs;    \n}\n","\n\nimport React from 'react'\n\nexport const GifGridItem = ({id,title,url}) => {\n    console.log({id, title, url});\n    return (\n        <div className=\"card animate__animated animate__fadeInDown\">\n            <img src={url} alt={title}></img>\n            <p>{title}</p>\n        </div>\n    )\n}\n\n","\nimport React, { Fragment } from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\n// import { getGifs } from '../helpers/getGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n\n    // const [images, setImages] = useState([]);\n\n    \n\n    const {data : images,loading} = useFetchGifs(category);\n    console.log(images);\n    console.log(loading);\n    // console.log(images);\n    // getGifs();\n    return (\n        <Fragment>\n            <h3 className=\"card animate__animated animate__fadeInDown\">{category}</h3>\n            {loading ? <p className=\"card animate__animated animate__flash\">Cargando</p> : null}\n            <div className=\"card-grid\">\n                \n                \n                    {\n                        images.map((img) => {\n                            return(\n                                <GifGridItem \n                                key={img.id}\n                                {...img}\n                                // img={img}\n                                />\n                            )\n                        })\n                    }\n            </div>\n        </Fragment>\n    )\n}\n","\n\nimport {useEffect, useState} from 'react'\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n    const [state, setstate] = useState({\n        data : [],\n        loading : true\n    });\n\n    useEffect( () => {\n        getGifs(category)\n                .then(imgs => {\n                    setTimeout(() => {\n                        setstate({\n                            data : imgs,\n                            loading : false\n                        });  \n                    },3000);\n                    \n                });\n    },[category]);\n\n    // setTimeout(() => {\n    //     setstate({\n    //         data    : [1,2,3],\n    //         loading : false\n    //     })\n    // },3000);\n\n   return state;\n}\n","import React, { Fragment,useState} from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n    //De esta forma no se hace debido a que es una constante y se debe de renderizar constantemente\n    // const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\n    const [categories, setCategories] = useState(['One Punch']);\n\n    // const handleAdd = () => {\n    //     setCategories(cats => [...cats,'New Element']);\n    // }\n    \n    return (\n        <Fragment>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories}/>\n            <hr />\n\n            {/* <button onClick={handleAdd}>Add</button> */}\n            {/* ol es una lista ordenada, li es un listItem */}\n            {/* Para recorrer los items no se usan los ciclos porque no devuelven nada, se usa el map */}\n            <ol>\n                {\n                    categories.map((category) => {\n                        return (\n                            <GifGrid key={category} \n                                category={category}\n                            />\n                            // <li key={category}>\n                            //     {category}\n                            // </li>\n                        )\n                    })\n                }\n            </ol>\n            \n        </Fragment>\n    );\n\n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}